{"/home/travis/build/npmtest/node-npmtest-crawler/test.js":"/* istanbul instrument in package npmtest_crawler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-crawler/lib.npmtest_crawler.js":"/* istanbul instrument in package npmtest_crawler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_crawler = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_crawler = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-crawler/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-crawler && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_crawler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_crawler\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_crawler.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_crawler.rollup.js'] =\n            local.assetsDict['/assets.npmtest_crawler.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_crawler.__dirname + '/lib.npmtest_crawler.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-crawler/node_modules/crawler/lib/crawler.js":"\n'use strict';\n\nvar path = require('path')\n, util = require('util')\n, EventEmitter = require('events').EventEmitter\n, request = require('request')\n, _ = require('lodash')\n, cheerio = require('cheerio')\n, fs = require('fs')\n, charsetParser = require('charset-parser')\n, Bottleneck = require('bottleneckp')\n, seenreq = require('seenreq')\n, iconvLite = require('iconv-lite')\n, typeis = require('type-is').is;\n\nvar whacko=null, level, levels = ['silly','debug','verbose','info','warn','error','critical'];\ntry{\n    whacko = require('whacko');\n}catch(e){}\n\nfunction defaultLog(){    //2016-11-24T12:22:55.639Z - debug:\n    if( levels.indexOf(arguments[0]) >= levels.indexOf(level) )\n\tconsole.log(new Date().toJSON()+\" - \"+ arguments[0] +\": CRAWLER %s\", util.format.apply(util, Array.prototype.slice.call(arguments, 1)));\n}\n\nfunction checkJQueryNaming (options) {\n    if ('jquery' in options) {\n        options.jQuery = options.jquery;\n        delete options.jquery;\n    }\n    return options;\n}\n\nfunction readJqueryUrl (url, callback) {\n    if (url.match(/^(file\\:\\/\\/|\\w+\\:|\\/)/)) {\n        fs.readFile(url.replace(/^file\\:\\/\\//,''),'utf-8', function(err,jq) {\n            callback(err, jq);\n        });\n    } else {\n        callback(null, url);\n    }\n}\n\nfunction contentType(res){\n    return get(res,'content-type');\n}\n\nfunction get(res,field){\n    return res.headers[field.toLowerCase()] || '';\n}\n\nvar log = defaultLog;\n\nfunction Crawler (options) {\n    var self = this;\n    \n    options = options||{};\n    if([\"onDrain\", \"preRequest\",\"cache\"].some(key => key in options)){\n\tthrow new Error(\"Support for 'onDrain', 'preRequest', 'cache' has been removed! For more details, see https://github.com/bda-research/node-crawler\");\n    }\n    \n    self.init(options);\n}\n// augment the prototype for node events using util.inherits\nutil.inherits(Crawler, EventEmitter);\n\nCrawler.prototype.init = function init (options) {\n    var self = this;\n\n    var defaultOptions = {\n        autoWindowClose:        true,\n        forceUTF8:              true,\n        gzip:                   true,\n        incomingEncoding:       null,\n        jQuery:                 true,\n        maxConnections:         10,\n        method:                 'GET',\n        priority:               5,\n        priorityRange:          10,\n        rateLimit:             0,\n        referer:                false,\n        retries:                3,\n        retryTimeout:           10000,\n        timeout:                15000,\n        skipDuplicates:         false,\n        rotateUA:               false,\n\thomogeneous:            false\n    };\n\n    //return defaultOptions with overriden properties from options.\n    self.options = _.extend(defaultOptions, options);\n\n    // you can use jquery or jQuery\n    self.options = checkJQueryNaming(self.options);\n    \n    // Don't make these options persist to individual queries\n    self.globalOnlyOptions = ['maxConnections', 'rateLimit', 'priorityRange', 'homogeneous', 'skipDuplicates', 'rotateUA'];\n\n    self.limiters = new Bottleneck.Cluster(self.options.maxConnections,self.options.rateLimit,self.options.priorityRange, self.options.priority, self.options.homogeneous);\n    self.seen = new seenreq();\n    level = self.options.debug?'debug':'info';\n    self.mapEntity = Object.create(null);\n    self.entityList = [\"jar\"];\n\n    if(self.options.logger)\n\tlog = self.options.logger.log;\n\n    self.on('_release', function(){\n\tif(this.debug)\n\t    log('debug',\"Queue size: %d\",this.queueSize);\n\t\n\tif(this.limiters.empty)\n\t    return this.emit('drain');\n    });\n};\n\nCrawler.prototype._inject = function _inject (response, options, callback) {\n    var $;\n\n    if (options.jQuery === 'whacko') {\n\tif(!whacko){\n\t    throw new Error(\"Please install whacko by your own since `crawler` detected you specify explicitly\");\n\t}\n\t\n\t$ = whacko.load(response.body);\n\tcallback(null, response, options, $);\n    }else if (options.jQuery === 'cheerio' || options.jQuery.name === 'cheerio' || options.jQuery === true) {\n        var defaultCheerioOptions = {\n            normalizeWhitespace: false,\n            xmlMode: false,\n            decodeEntities: true\n        };\n        var cheerioOptions = options.jQuery.options || defaultCheerioOptions;\n        $ = cheerio.load(response.body, cheerioOptions);\n\n        callback(null, response, options, $);\n    }else if (options.jQuery.jsdom) {\n        var jsdom = options.jQuery.jsdom;\n        var scriptLocation = path.resolve(__dirname, '../vendor/jquery-2.1.1.min.js');\n\n        //Use promises\n        readJqueryUrl(scriptLocation, function(err, jquery) {\n            try {\n                jsdom.env({\n                    url: options.uri,\n                    html: response.body,\n                    src: [jquery],\n                    done: function (errors, window) {\n                        $ = window.jQuery;\n                        callback(errors, response, options, $);\n\n                        try {\n                            window.close();\n                            window = null;\n                        } catch (err) {\n                            log(\"error\",err);\n                        }\n\n                    }\n                });\n            } catch (e) {\n                options.callback(e,{options}, options.release);\n            }\n        });\n    }\n    // Jquery is set to false are not set\n    else {\n        callback(null, response, options);\n    }\n};\n\nCrawler.prototype.queue = function queue (options) {\n    var self = this;\n    \n    // Did you get a single object or string? Make it compatible.\n    options = _.isArray(options) ? options : [options];\n\n    options = _.flattenDeep(options);\n\n    for(var i = 0; i < options.length; ++i) {\n        if(_.isNull(options[i]) || _.isUndefined(options[i]) || (!_.isString(options[i]) && !_.isPlainObject(options[i]))) {\n            log(\"warn\",\"Illegal queue option: \", JSON.stringify(options[i]));\n            continue;\n        }\n        self._pushToQueue(\n            _.isString(options[i]) ? {uri: options[i]} : options[i]\n        );\n    }\n};\n\nCrawler.prototype._pushToQueue = function _pushToQueue (options) {\n    var self = this;\n\n    // you can use jquery or jQuery\n    options = checkJQueryNaming(options);\n\n    _.defaults(options, self.options);\n\n    // Remove all the global options from our options\n    // TODO we are doing this for every _pushToQueue, find a way to avoid this\n    self.globalOnlyOptions.forEach(globalOnlyOption=>delete options[globalOnlyOption]);\n\n    // If duplicate skipping is enabled, avoid queueing entirely for URLs we already crawled\n    if (self.options.skipDuplicates && self.seen.exists(options)) {\n        return\n    }\n\n    self.emit('schedule',options);\n    \n    self.limiters.key(options.limiter||\"default\").submit(options.priority,function(done, limiter){\n\toptions.release = function(){ done();self.emit('_release'); };\n\tif(!options.callback)\n\t    options.callback = options.release;\n\t\n\tif (limiter) {\n\t    self.emit('limiterChange', options, limiter)\n\t}\n\t\n\tif (options.html) {\n            self._onContent(null, options, {body:options.html,headers:{'content-type':\"text/html\"}})\n        } else if (typeof options.uri === 'function') {\n            options.uri(function(uri) {\n                options.uri = uri\n                self._buildHttpRequest(options)\n            })\n        } else {\n            self._buildHttpRequest(options)\n        }\n    });\n};\n\nCrawler.prototype._deleteEntity = function _deleteEntity(options){\n    var self = this;\n    self.entityList.forEach(function(name){\n\tif(typeof options[name] === \"object\"){\n\t    self.mapEntity[name] = options[name];\n\t    delete options[name];\n\t}\n    })\n}\n\nCrawler.prototype._attachEntity = function _attachEntity(options){\n    var self = this;\n    return self.entityList.reduce(function(target,name){\n\tif(typeof self.mapEntity[name] === \"object\")\n\t    target[name] = self.mapEntity[name];\n\t\n\treturn target;\n    }, options);\n}\n\nCrawler.prototype._buildHttpRequest = function _buildHTTPRequest (options) {\n    var self = this;\n\n    log(\"debug\",options.method+' '+options.uri);\n    if(options.proxy)\n\tlog(\"debug\",\"Use proxy: %s\", options.proxy);\n\n    // Cloning keeps the opts parameter clean:\n    // - some versions of \"request\" apply the second parameter as a\n    // property called \"callback\" to the first parameter\n    // - keeps the query object fresh in case of a retry\n    // Doing parse/stringify instead of _.clone will do a deep clone and remove functions\n    \n    self._deleteEntity(options);\n    var ropts = JSON.parse(JSON.stringify(options));\n    self._attachEntity(ropts);\n    \n    if (!ropts.headers) { ropts.headers={}; }\n    if (ropts.forceUTF8) {ropts.encoding=null;}\n    if (ropts.userAgent) {\n\tif(self.options.rotateUA && _.isArray(ropts.userAgent)){\n            ropts.headers['User-Agent'] = ropts.userAgent[0];\n            // If \"rotateUA\" is true, rotate User-Agent\n            options.userAgent.push(options.userAgent.shift());\n\t}else{\n            ropts.headers['User-Agent'] = ropts.userAgent;\n\t}\n    }\n    \n    if (ropts.referer) {\n        ropts.headers.Referer = ropts.referer;\n    }\n    \n    if (ropts.proxies && ropts.proxies.length) {\n        ropts.proxy = ropts.proxies[0];\n    }\n    \n    self.emit(\"request\",ropts);\n\n    var requestArgs = ['uri','url','qs','method','headers','body','form','json','multipart','followRedirect',\n\t\t       'followAllRedirects', 'maxRedirects','encoding','pool','timeout','proxy','auth','oauth','strictSSL',\n\t\t       'jar','aws','gzip','time','tunnel','proxyHeaderWhiteList','proxyHeaderExclusiveList','localAddress','forever'];\n\n    request(_.pick.apply(self,[ropts].concat(requestArgs)), function(error,response) {\n        if (error) {\n            return self._onContent(error, options);\n        }\n\t\n        self._onContent(error,options,response);\n    });\n};\n\nCrawler.prototype._onContent = function _onContent (error, options, response) {\n    var self = this;\n\n    if (error) {\n        log(\"error\",'Error '+error+' when fetching '+\n\t    options.uri+(options.retries?' ('+options.retries+' retries left)':''));\n\t\n        if (options.retries) {\n            setTimeout(function() {\n                options.retries--;\n\t\tself.queue(options);\n\t\toptions.release();\n            },options.retryTimeout);\n        } else{\n            options.callback(error,{options:options},options.release);\n\t}\n\t\n\treturn;\n    }\n    \n    if (!response.body) { response.body=''; }\n\n    log(\"debug\",'Got '+(options.uri||'html')+' ('+response.body.length+' bytes)...');\n\n    try{\n        self._doEncoding(options,response);\n    }catch(e){\n        log(\"error\",e);\n\treturn options.callback(e,{options:options},options.release);\n    }\n    \n    response.options = options;\n\n    if(options.method === 'HEAD' || !options.jQuery){\n\treturn options.callback(null,response,options.release);\n    }\n\n    if (!options.html && !typeis(contentType(response), ['html','xhtml'])){\n\tlog(\"warn\",\"response body is not HTML, skip injecting\");\n\treturn options.callback(null,response,options.release);\n    }\n\n    log(\"debug\",\"Injecting\");\n    \n    self._inject(response, options, self._injected.bind(self));\n};\n\nCrawler.prototype._injected = function(errors, response, options, $){\n    if(this.debug)\n\tlog(\"debug\",\"Injected\")\n\n    response.$ = $;\n    options.callback(errors, response, options.release);\n}\n\nCrawler.prototype._doEncoding = function(options,response){\n    var self = this;\n    \n    if(options.encoding === null){\n\treturn;\n    }\n    \n    if (options.forceUTF8) {\n\tvar charset = options.incomingEncoding || self._parseCharset(response);\n\t\n        log(\"debug\",'Charset ' + charset);\n\n        if (charset !== 'utf-8' && charset !== 'ascii') {// convert response.body into 'utf-8' encoded buffer\n            response.body = iconvLite.decode(response.body, charset);\n        }\n    }\n    \n    response.body = response.body.toString();\n}\n\nCrawler.prototype._parseCharset = function(res){\n    var charset = charsetParser(contentType(res));\n    if(charset)\n\treturn charset;\n\n    if(!typeis(contentType(res), ['html'])){\n\tlog(\"debug\",'Charset not detected in response headers, please specify using `incomingEncoding`, use `utf-8` by default');\n\treturn 'utf-8';\n    }\n    \n    var body = res.body instanceof Buffer?res.body.toString():res.body;\n    charset = charsetParser(contentType(res),body,'utf-8');\n    \n    return charset;\n}\n\nObject.defineProperty(Crawler.prototype,'queueSize',{\n    get:function(){\n\treturn this.limiters.unfinishedClients;\n    }\n})\n\nmodule.exports = Crawler;\n","/home/travis/build/npmtest/node-npmtest-crawler/node_modules/crawler/lib/debug.js":"'use strict';\n\nvar util = require('util');\nvar crawler = require('./crawler');\nmodule.exports = function debug() {\n    if (crawler.debug) {\n        console.error('CRAWLER %s', util.format.apply(util, arguments))\n    }\n};"}